import { FunctionComponent } from 'react';
import Range from './Range';
export type CustomHTMLNode = {
    dataset: {
        position: string;
    };
} & ParentNode;
export type HighlightStyle = Record<string, string>;
export type HighlightStyleFunc = ((range: Range, charIndex: number) => HighlightStyle);
export type OnMouseOverHighlightedWord = (range: Range) => void;
export type OnMouseOverHighlightedWordHandler = (range: Range, isVisible: boolean) => void;
export interface HighlightableProps {
    ranges: Range[];
    onMouseOverHighlightedWord: OnMouseOverHighlightedWord;
    id: string;
    highlightStyle?: HighlightStyle | HighlightStyleFunc;
    text: string;
    enabled: boolean;
    rangeRenderer?: (currentRenderedNodes: JSX.Element[], currentRenderedRange: Range, currentRenderedIndex: number, onMouseOverHighlightedWord: OnMouseOverHighlightedWordHandler) => JSX.Element;
    nodeRenderer?: (charIndex: number, range: Range, text: string, url: string, isEmoji: boolean) => JSX.Element;
    style: Record<string, string>;
    onTextHighlighted: (range: Range) => void;
}
declare const Highlightable: FunctionComponent<HighlightableProps>;
export default Highlightable;
